50 Days SQL Challenge

Day-29

üî•Challenge 

The challenge is to construct an SQL query to achieve the following:

Identify and list the top 5 artists based on their total sales.

üí°Solution 

SELECT Artist.Name AS ArtistName, SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity) AS TotalSales FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId JOIN Track ON Album.AlbumId = Track.AlbumId JOIN InvoiceLine ON Track.TrackId = InvoiceLine.TrackId GROUP BY Artist.ArtistId ORDER BY TotalSales DESC LIMIT 5;

üìù Explanation

To solve this, let's break the SQL query into smaller queries.


‚ñ∂Ô∏é SELECT Artist.Name AS ArtistName: Selects the name of the artist from the "Artist" table and aliases it as "ArtistName".

‚ñ∂Ô∏é  SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity) AS TotalSales: Calculates the total sales for each artist by summing up the product of "UnitPrice" and "Quantity" from the "InvoiceLine" table for tracks associated with each artist. The result is aliased as "TotalSales".

‚ñ∂Ô∏é  FROM Artist: Specifies the "Artist" table as the main table.

‚ñ∂Ô∏é  JOIN Album ON Artist.ArtistId = Album.ArtistId: Performs a join with the "Album" table based on the common "ArtistId" column.

‚ñ∂Ô∏é  JOIN Track ON Album.AlbumId = Track.AlbumId: Performs another join with the "Track" table based on the common "AlbumId" column.

‚ñ∂Ô∏é  JOIN InvoiceLine ON Track.TrackId = InvoiceLine.TrackId: Performs a final join with the "InvoiceLine" table based on the common "TrackId" column.

‚ñ∂Ô∏é  GROUP BY Artist.ArtistId: Groups the results by artist to calculate the total sales for each artist.

‚ñ∂Ô∏é ORDER BY TotalSales DESC: Orders the result set by "TotalSales" in descending order.

‚ñ∂Ô∏é LIMIT 5: Limits the output to the top 5 results.

Let me know what you think! Please share your suggestions or feedback on how I can improve this SQL query or anything else.


Thank you for reading! ü§ó

If you found this useful:-

Follow me on Twitter: https://twitter.com/asenseofpradhyu